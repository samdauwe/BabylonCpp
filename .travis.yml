# Ubuntu 14.04 Trusty support
dist: trusty
sudo: required

# Enable C++ support
language: cpp

# The branch to build
# branches:
#   only:
#     - master

env:
  # Workaround for https://github.com/travis-ci/travis-ci/issues/4681
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true

matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true

  include:
    ####################################################################
    # Build with the main configuration on all the supported compilers #
    ####################################################################

    # Clang 5.0
    - os: linux
      compiler: clang++-5.0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - libxi-dev
            - libxcursor-dev
            - libxinerama-dev
            - libxrandr-dev
            - libgl1-mesa-dev
            - mesa-common-dev
            - clang-5.0
      env: CC_VERSION=clang-5.0 CXX_VERSION=clang++-5.0

    # GCC 7
    - os: linux
      compiler: g++-7
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libxi-dev
            - libxcursor-dev
            - libxinerama-dev
            - libxrandr-dev
            - libgl1-mesa-dev
            - mesa-common-dev
            - g++-7
            - gcc-7
      env: CC_VERSION=gcc-7 CXX_VERSION=g++-7

    # OSX
    - os: osx
      osx_image: xcode10.2
      env: OSX="On" CC_VERSION=clang CXX_VERSION=clang++

install:
  ###################################################################
  # All the dependencies are installed in ${HOME}/deps/ #
  ###################################################################
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ###################################################################
  # Setup default versions and override CXX set by Travis if needed #
  ###################################################################
  - if [[ "${CC_VERSION}" != "" ]]; then export CC=${CC_VERSION}; fi
  - if [[ "${CXX_VERSION}" != "" ]]; then export CXX=${CXX_VERSION}; fi
  - ${CXX} --version

  ##########################
  # Install a recent CMake #
  ##########################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.11/cmake-3.11.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
  - cmake --version

  ############################################################################
  # Install libc++ and libc++abi if needed
  ############################################################################
  - |
    if [[ "${CXX%%+*}" == "clang" && "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if   [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.1";
      elif [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
      fi
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm || exit 1
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx || exit 1
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi || exit 1
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install) || exit 1
      (cd llvm/build/projects/libcxx && make install -j2) || exit 1
      (cd llvm/build/projects/libcxxabi && make install -j2) || exit 1
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

before_script:
  ####################################################################
  # Go back to the root of the project and setup the build directory #
  ####################################################################
  - cd "${TRAVIS_BUILD_DIR}"
  - cmake --version
  - mkdir build && cd build && cmake ../

# Build steps
script:
  - make all -j 4 -k

# Notifications settings
notifications:
  email:
    on_success: never
    on_failure: always
